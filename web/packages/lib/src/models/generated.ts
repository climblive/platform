// Code generated by tygo. DO NOT EDIT.

//////////
// source: id.go

export type ResourceID = number /* int32 */;
export type CompClassID = ResourceID;
export type ContenderID = ResourceID;
export type ContestID = ResourceID;
export type OrganizerID = ResourceID;
export type ProblemID = ResourceID;
export type RaffleID = ResourceID;
export type RaffleWinnerID = ResourceID;
export type SeriesID = ResourceID;
export type UserID = ResourceID;
export type TickID = ResourceID;
export type ResourceIDType = 
    CompClassID | ContenderID | ContestID | OrganizerID | ProblemID | RaffleID | RaffleWinnerID | SeriesID | UserID | TickID;
export type ScoreEngineInstanceID = string;

//////////
// source: public.go

export type ColorRGB = string;
export interface CompClass {
  id?: CompClassID;
  contestId: ContestID;
  name: string;
  description?: string;
  color?: ColorRGB;
  timeBegin: Date;
  timeEnd: Date;
}
export interface Contender {
  id?: ContenderID;
  contestId: ContestID;
  compClassId?: CompClassID;
  registrationCode: string;
  name?: string;
  publicName?: string;
  clubName?: string;
  entered?: Date;
  withdrawnFromFinals: boolean;
  disqualified: boolean;
  score?: Score;
}
export interface ContenderPatch {
  compClassId?: CompClassID;
  name?: string;
  publicName?: string;
  clubName?: string;
  withdrawnFromFinals?: boolean;
  disqualified?: boolean;
}
export interface Contest {
  id?: ContestID;
  location?: string;
  seriesId?: SeriesID;
  protected: boolean;
  name: string;
  description?: string;
  finalsEnabled: boolean;
  qualifyingProblems: number /* int */;
  finalists: number /* int */;
  rules?: string;
  gracePeriod: number;
  timeBegin?: Date;
  timeEnd?: Date;
}
export interface Organizer {
  id?: OrganizerID;
  name: string;
  homepage?: string;
}
export interface Problem {
  id?: ProblemID;
  contestId: ContestID;
  number: number /* int */;
  holdColorPrimary: string;
  holdColorSecondary?: string;
  name?: string;
  description?: string;
  pointsTop: number /* int */;
  pointsZone: number /* int */;
  flashBonus?: number /* int */;
}
export interface Raffle {
  id?: RaffleID;
  contestId: ContestID;
  active: boolean;
}
export interface RaffleWinner {
  id?: RaffleWinnerID;
  raffleId: RaffleID;
  contenderId: ContenderID;
  readonly contenderName: string;
  timestamp: Date;
}
export interface Score {
  timestamp: Date;
  contenderId: ContenderID;
  score: number /* int */;
  placement: number /* int */;
  finalist: boolean;
  rankOrder: number /* int */;
}
export interface Series {
  id?: SeriesID;
  name: string;
}
export interface ScoreboardEntry {
  contenderId: ContenderID;
  compClassId: CompClassID;
  publicName: string;
  clubName?: string;
  withdrawnFromFinals: boolean;
  disqualified: boolean;
  score?: Score;
}
export interface Tick {
  id?: TickID;
  timestamp: Date;
  problemId: ProblemID;
  top: boolean;
  attemptsTop: number /* int */;
  zone: boolean;
  attemptsZone: number /* int */;
}
export interface User {
  id?: UserID;
  name: string;
  username: string;
  admin: boolean;
  organizers: OrganizerID[];
}
export interface ContenderEnteredEvent {
  contenderId: ContenderID;
  compClassId: CompClassID;
}
export interface ContenderSwitchedClassEvent {
  contenderId: ContenderID;
  compClassId: CompClassID;
}
export interface ContenderWithdrewFromFinalsEvent {
  contenderId: ContenderID;
}
export interface ContenderReenteredFinalsEvent {
  contenderId: ContenderID;
}
export interface ContenderDisqualifiedEvent {
  contenderId: ContenderID;
}
export interface ContenderRequalifiedEvent {
  contenderId: ContenderID;
}
export interface AscentRegisteredEvent {
  tickId: TickID;
  timestamp: Date;
  contenderId: ContenderID;
  problemId: ProblemID;
  top: boolean;
  attemptsTop: number /* int */;
  zone: boolean;
  attemptsZone: number /* int */;
}
export interface AscentDeregisteredEvent {
  tickId: TickID;
  contenderId: ContenderID;
  problemId: ProblemID;
}
export interface ProblemAddedEvent {
  problemId: ProblemID;
  pointsTop: number /* int */;
  pointsZone: number /* int */;
  flashBonus: number /* int */;
}
export interface ProblemUpdatedEvent {
  problemId: ProblemID;
  pointsTop: number /* int */;
  pointsZone: number /* int */;
  flashBonus: number /* int */;
}
export interface ProblemDeletedEvent {
  problemId: ProblemID;
}
export interface ContenderPublicInfoUpdatedEvent {
  contenderId: ContenderID;
  compClassId: CompClassID;
  publicName: string;
  clubName?: string;
  withdrawnFromFinals: boolean;
  disqualified: boolean;
}
export interface ContenderScoreUpdatedEvent {
  timestamp: Date;
  contenderId: ContenderID;
  score: number /* int */;
  placement: number /* int */;
  finalist: boolean;
  rankOrder: number /* int */;
}
export interface ScoreEngineStartedEvent {
  instanceId: ScoreEngineInstanceID;
}
export interface ScoreEngineStoppedEvent {
  instanceId: ScoreEngineInstanceID;
}
