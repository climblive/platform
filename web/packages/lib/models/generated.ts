// Code generated by tygo. DO NOT EDIT.

//////////
// source: auth.go

export type AuthRole = string;
export const NilRole: AuthRole = "";
export const ContenderRole: AuthRole = "contender";
export const JudgeRole: AuthRole = "judge";
export const OrganizerRole: AuthRole = "organizer";
export const AdminRole: AuthRole = "admin";
export type Authorizer = any;
export interface OwnershipData {
  OrganizerID: OrganizerID;
  ContenderID?: ContenderID;
}

//////////
// source: compclass.go

export type ColorRGB = string;
export interface CompClass {
  id?: CompClassID;
  contestId: ContestID;
  name: string;
  description?: string;
  color?: ColorRGB;
  timeBegin: string;
  timeEnd: string;
}
export type CompClassUseCase = any;

//////////
// source: contender.go

export interface Contender {
  id?: ContenderID;
  contestId: ContestID;
  compClassId?: CompClassID;
  registrationCode: string;
  name?: string;
  publicName?: string;
  clubName?: string;
  entered?: string;
  withdrawnFromFinals: boolean;
  disqualified: boolean;
  score?: Score;
}
export interface ContenderPatch {
  compClassId?: CompClassID;
  name?: string;
  publicName?: string;
  clubName?: string;
  withdrawnFromFinals?: boolean;
  disqualified?: boolean;
}
export type ContenderUseCase = any;
export type CodeGenerator = any;

//////////
// source: contest.go

export interface Contest {
  id?: ContestID;
  location?: string;
  seriesId?: SeriesID;
  protected: boolean;
  name: string;
  description?: string;
  finalsEnabled: boolean;
  qualifyingProblems: number /* int */;
  finalists: number /* int */;
  rules?: string;
  gracePeriod: number;
  timeBegin?: string;
  timeEnd?: string;
}
export type ContestUseCase = any;

//////////
// source: event.go

export type SubscriptionID = string;
export interface EventFilter {
  ContestID: ContestID;
  ContenderID: ContenderID;
  EventTypes: { [key: string]: {
  }};
}
export type EventBroker = any;
export type EventReader = any;
export interface EventEnvelope {
  Data: any;
}
export interface ContenderEnteredEvent {
  contenderId: ContenderID;
  compClassId: CompClassID;
}
export interface ContenderSwitchedClassEvent {
  contenderId: ContenderID;
  compClassId: CompClassID;
}
export interface ContenderWithdrewFromFinalsEvent {
  contenderId: ContenderID;
}
export interface ContenderReenteredFinalsEvent {
  contenderId: ContenderID;
}
export interface ContenderDisqualifiedEvent {
  contenderId: ContenderID;
}
export interface ContenderRequalifiedEvent {
  contenderId: ContenderID;
}
export interface AscentRegisteredEvent {
  contenderId: ContenderID;
  problemId: ProblemID;
  top: boolean;
  attemptsTop: number /* int */;
  zone: boolean;
  attemptsZone: number /* int */;
}
export interface AscentDeregisteredEvent {
  contenderId: ContenderID;
  problemId: ProblemID;
}
export interface ProblemAddedEvent {
  problemId: ProblemID;
  pointsTop: number /* int */;
  pointsZone: number /* int */;
  flashBonus: number /* int */;
}
export interface ProblemUpdatedEvent {
  problemId: ProblemID;
  pointsTop: number /* int */;
  pointsZone: number /* int */;
  flashBonus: number /* int */;
}
export interface ProblemDeletedEvent {
  problemId: ProblemID;
}
export interface ContenderPublicInfoUpdatedEvent {
  contenderId: ContenderID;
  compClassId: CompClassID;
  publicName: string;
  clubName?: string;
  withdrawnFromFinals: boolean;
  disqualified: boolean;
}
export interface ContenderScoreUpdatedEvent {
  timestamp: string;
  contenderId: ContenderID;
  score: number /* int */;
  placement: number /* int */;
  finalist: boolean;
  rankOrder: number /* int */;
}

//////////
// source: id.go

export type ResourceID = number /* int32 */;
export type CompClassID = ResourceID;
export type ContenderID = ResourceID;
export type ContestID = ResourceID;
export type OrganizerID = ResourceID;
export type ProblemID = ResourceID;
export type RaffleID = ResourceID;
export type RaffleWinnerID = ResourceID;
export type SeriesID = ResourceID;
export type UserID = ResourceID;
export type TickID = ResourceID;
export type ResourceIDType = 
    CompClassID | ContenderID | ContestID | OrganizerID | ProblemID | RaffleID | RaffleWinnerID | SeriesID | UserID | TickID;

//////////
// source: organizer.go

export interface Organizer {
  ID: OrganizerID;
  Ownership: OwnershipData;
  Name: string;
  Homepage: string;
}
export type OrganizerUseCase = any;

//////////
// source: patch.go

export interface Patch<T extends any> {
  Value: T;
}

//////////
// source: problem.go

export interface Problem {
  id?: ProblemID;
  contestId: ContestID;
  number: number /* int */;
  holdColorPrimary: string;
  holdColorSecondary?: string;
  name?: string;
  description?: string;
  pointsTop: number /* int */;
  pointsZone: number /* int */;
  flashBonus?: number /* int */;
}
export type ProblemUseCase = any;

//////////
// source: raffle.go

export interface Raffle {
  ID: RaffleID;
  Ownership: OwnershipData;
  ContestID: ContestID;
  Active: boolean;
}
export type RaffleUseCase = any;

//////////
// source: rafflewinner.go

export interface RaffleWinner {
  ID: RaffleWinnerID;
  Ownership: OwnershipData;
  RaffleID: RaffleID;
  ContenderID: ContenderID;
  ContenderName: string;
  Timestamp: string;
}
export type RaffleWinnerUseCase = any;

//////////
// source: repo.go

export type Transaction = any;
export type Transactor = any;

//////////
// source: score.go

export type ScoreKeeper = any;
export interface Score {
  timestamp: string;
  contenderId: ContenderID;
  score: number /* int */;
  placement: number /* int */;
  finalist: boolean;
  rankOrder: number /* int */;
}

//////////
// source: scoreboard.go

export interface ScoreboardEntry {
  contenderId: ContenderID;
  compClassId: CompClassID;
  publicName?: string;
  clubName?: string;
  withdrawnFromFinals: boolean;
  disqualified: boolean;
  score?: Score;
}

//////////
// source: series.go

export interface Series {
  ID: SeriesID;
  Ownership: OwnershipData;
  Name: string;
}
export type SeriesUseCase = any;

//////////
// source: tick.go

export interface Tick {
  id?: TickID;
  timestamp: string;
  contestId: ContestID;
  problemId: ProblemID;
  top: boolean;
  attemptsTop: number /* int */;
  zone: boolean;
  attemptsZone: number /* int */;
}
export type TickUseCase = any;

//////////
// source: user.go

export interface User {
  ID: UserID;
  Name: string;
  Username: string;
  Admin: boolean;
  Organizers: OrganizerID[];
}
export type UserUseCase = any;
